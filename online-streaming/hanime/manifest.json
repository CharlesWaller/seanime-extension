{
  "id": "hanime-online-streaming",
  "name": "hanime.tv",
  "version": "1.0.0",
  "manifestURI": "https://raw.githubusercontent.com/TropicalFrog3/seanime-extension/refs/heads/main/online-streaming/hanime/manifest.json",
  "language": "typescript",
  "type": "onlinestream-provider",
  "description": "Provides seamless integration with the hanime.tv catalog for online streaming within Seanime, enabling users to browse, search, and watch available titles directly from the platform.",
  "author": "TropicalFrog3",
  "icon": "https://raw.githubusercontent.com/TropicalFrog3/seanime-extension/refs/heads/main/online-streaming/hanime/favicon.png",
  "website": "",
  "lang": "en",
  "payload": "/// <reference path=\"../external/.onlinestream-provider.d.ts\" /\u003e\n/// \u003creference path=\"../external/core.d.ts\" /\u003e\n\n// ---------- Types ----------\ntype RawSearchResult = {\n    id: number;\n    name: string;\n    titles: string[];\n    slug: string;\n    description: string;\n    views: number;\n    interests: number;\n    poster_url: string;\n    cover_url: string;\n    brand: string;\n    brand_id: number;\n    duration_in_ms: number;\n    is_censored: boolean;\n    likes: number;\n    rating: number;\n    dislikes: number;\n    downloads: number;\n    monthly_rank: number;\n    tags: string[];\n    created_at: number;\n    released_at: number;\n    dub: SubOrDub;\n};\n\ntype HanimeResponse = {\n    layout: string;\n    data: any[];\n    error: null;\n    serverRendered: boolean;\n    state: State;\n    videos_manifest?: VideosManifest;\n    pr?: boolean;\n};\n\ntype State = {\n    scrollY: number;\n    version: number;\n    is_new_version: boolean;\n    r: null;\n    country_code: null;\n    page_name: string;\n    user_agent: string;\n    ip: null;\n    referrer: null;\n    geo: null;\n    is_dev: boolean;\n    is_wasm_supported: boolean;\n    is_mounted: boolean;\n    is_loading: boolean;\n    is_searching: boolean;\n    browser_width: number;\n    browser_height: number;\n    system_msg: string;\n    data: Data;\n    auth_claim: null;\n    session_token: string;\n    session_token_expire_time_unix: number;\n    env: Env;\n    user: null;\n    user_setting: null;\n    playlists: null;\n    shuffle: boolean;\n    account_dialog: AccountDialog;\n    contact_us_dialog: ContactUsDialog;\n    general_confirmation_dialog: GeneralConfirmationDialog;\n    snackbar: Snackbar;\n    search: Search;\n}\n\ntype Data = {\n    video: Video;\n}\n\ntype Video = {\n    player_base_url: string;\n    hentai_video: HentaiVideo;\n    hentai_tags: HentaiTag[];\n    hentai_franchise: HentaiFranchise;\n    hentai_franchise_hentai_videos: HentaiVideo[];\n    hentai_video_storyboards: HentaiVideoStoryboard[];\n    brand: Brand;\n    watch_later_playlist_hentai_videos: null;\n    like_dislike_playlist_hentai_videos: null;\n    playlist_hentai_videos: null;\n    similar_playlists_data: null;\n    next_hentai_video: HentaiVideo;\n    next_random_hentai_video: HentaiVideo;\n    videos_manifest?: VideosManifest;\n    user_license: null;\n    bs: Bs;\n    ap: number;\n    pre: string;\n    encrypted_user_license: null;\n    host: string;\n}\n\ntype HentaiVideo = {\n    id: number;\n    is_visible: boolean;\n    name: string;\n    slug: string;\n    created_at: string;\n    released_at: string;\n    description?: string;\n    views: number;\n    interests: number;\n    poster_url: string;\n    cover_url: string;\n    is_hard_subtitled: boolean;\n    brand: string;\n    duration_in_ms: number;\n    is_censored: boolean;\n    rating: number;\n    likes: number;\n    dislikes: number;\n    downloads: number;\n    monthly_rank: number;\n    brand_id: string;\n    is_banned_in: string;\n    preview_url: null;\n    primary_color: null;\n    created_at_unix: number;\n    released_at_unix: number;\n    hentai_tags?: HentaiTag[];\n    titles?: any[];\n}\n\ntype HentaiTag = {\n    id: number;\n    text: string;\n    count?: number;\n    description?: string;\n    wide_image_url?: string;\n    tall_image_url?: string;\n}\n\ntype HentaiFranchise = {\n    id: number;\n    name: string;\n    slug: string;\n    title: string;\n}\n\ntype HentaiVideoStoryboard = {\n    id: number;\n    num_total_storyboards: number;\n    sequence: number;\n    url: string;\n    frame_width: number;\n    frame_height: number;\n    num_total_frames: number;\n    num_horizontal_frames: number;\n    num_vertical_frames: number;\n}\n\ntype Brand = {\n    id: number;\n    title: string;\n    slug: string;\n    website_url: null;\n    logo_url: null;\n    email: null;\n    count: number;\n}\n\ntype VideosManifest = {\n    servers: Server[];\n}\n\ntype Server = {\n    id: number;\n    name: string;\n    slug: string;\n    na_rating: number;\n    eu_rating: number;\n    asia_rating: number;\n    sequence: number;\n    is_permanent: boolean;\n    streams: Stream[];\n}\n\ntype Stream = {\n    id: number;\n    server_id: number;\n    slug: string;\n    kind: string;\n    extension: string;\n    mime_type: string;\n    width: number;\n    height: string;\n    duration_in_ms: number;\n    filesize_mbs: number;\n    filename: string;\n    url: string;\n    is_guest_allowed: boolean;\n    is_member_allowed: boolean;\n    is_premium_allowed: boolean;\n    is_downloadable: boolean;\n    compatibility: string;\n    hv_id: number;\n    server_sequence: number;\n    video_stream_group_id: string;\n    extra2: null;\n}\n\ntype Bs = {\n    ntv_1: Ntv1;\n    ntv_2: Ntv2;\n    footer_0: Footer0;\n    native_1: Native1;\n    native_0: Native0;\n    ntv_0: Ntv0;\n}\n\ntype Ntv1 = {\n    desktop: DesktopAd;\n}\n\ntype Ntv2 = {\n    desktop: DesktopAd;\n}\n\ntype Footer0 = {\n    mobile: MobileAd;\n    desktop: DesktopAd;\n}\n\ntype Native1 = {\n    mobile: NativeAd;\n}\n\ntype Native0 = {\n    mobile: NativeAd;\n}\n\ntype Ntv0 = {\n    desktop: DesktopAd;\n}\n\ntype DesktopAd = {\n    id: number;\n    ad_id: string;\n    ad_type: string;\n    placement: string;\n    image_url: null;\n    iframe_url: string;\n    click_url: null | string;\n    width: number;\n    height: number;\n    page: string;\n    form_factor: string;\n    video_url: null;\n    impressions: number;\n    clicks: number;\n    seconds: number;\n    placement_x: null;\n}\n\ntype MobileAd = {\n    id: number;\n    ad_id: string;\n    ad_type: string;\n    placement: string;\n    image_url: null;\n    iframe_url: string;\n    click_url: null;\n    width: number;\n    height: number;\n    page: string;\n    form_factor: string;\n    video_url: null;\n    impressions: number;\n    clicks: number;\n    seconds: number;\n    placement_x: null;\n}\n\ntype NativeAd = {\n    id: number;\n    ad_id: string;\n    ad_type: string;\n    placement: string;\n    image_url: string;\n    iframe_url: null;\n    click_url: string;\n    width: number;\n    height: number;\n    page: string;\n    form_factor: string;\n    video_url: null;\n    impressions: number;\n    clicks: number;\n    seconds: number;\n    placement_x: string;\n}\n\ntype Env = {\n    vhtv_version: number;\n    premium_coin_cost: number;\n    mobile_apps: MobileApps;\n}\n\ntype MobileApps = {\n    code_name: string;\n    _build_number: number;\n    _semver: string;\n    _md5: string;\n    _url: string;\n}\n\ntype AccountDialog = {\n    is_visible: boolean;\n    active_tab_id: string;\n    tabs: Tab[];\n}\n\ntype Tab = {\n    id: string;\n    icon: string;\n    title: string;\n}\n\ntype ContactUsDialog = {\n    is_visible: boolean;\n    is_video_report: boolean;\n    subject: string;\n    email: string;\n    message: string;\n    is_sent: boolean;\n}\n\ntype GeneralConfirmationDialog = {\n    is_visible: boolean;\n    is_persistent: boolean;\n    is_mini_close_button_visible: boolean;\n    is_cancel_button_visible: boolean;\n    cancel_button_text: string;\n    title: string;\n    body: string;\n    confirm_button_text: string;\n    confirmation_callback: null;\n}\n\ntype Snackbar = {\n    timeout: number;\n    context: string;\n    mode: string;\n    y: string;\n    x: string;\n    is_visible: boolean;\n    text: string;\n}\n\ntype Search = {\n    cache_sorting_config: any[];\n    cache_tags_filter: null;\n    cache_active_brands: null;\n    cache_blacklisted_tags_filter: null;\n    search_text: string;\n    search_response_payload: null;\n    total_search_results_count: number;\n    order_by: string;\n    ordering: string;\n    tags_match: string;\n    page_size: number;\n    offset: number;\n    page: number;\n    number_of_pages: number;\n    tags: any[];\n    active_tags_count: number;\n    brands: any[];\n    active_brands_count: number;\n    blacklisted_tags: any[];\n    active_blacklisted_tags_count: number;\n    is_using_preferences: boolean;\n}\n\n// ---------- Utility Functions ----------\nfunction mapToSearchResult(raw: RawSearchResult): SearchResult {\n    return {\n        id: String(raw.id),\n        title: raw.name,\n        url: raw.slug,\n        subOrDub: raw.dub ? \"dub\" : \"sub\",\n    };\n}\n\nfunction replaceAndWithAmpersand(text: string): string {\n    return text.replace(/\\b(And|and)\\b/g, \"&\");\n}\n\nfunction generateSignature(length = 32): string {\n    return Array.from({ length }, () => Math.floor(Math.random() * 16).toString(16)).join('');\n}\n\nfunction parseHits(hits: string): SearchResult[] {\n    return (JSON.parse(hits) as RawSearchResult[]).map(mapToSearchResult);\n}\n\n// ---------- Main Class ----------\nclass Provider {\n    private readonly SEARCH_URL = \"https://search.htv-services.com\";\n    private readonly EPISODE_URL = \"https://hanime.tv/rapi/v7/videos_manifests/\";\n    private readonly API = \"https://hanime.tv\";\n    private readonly REFERER_API = \"https://player.hanime.tv\";\n\n    getSettings(): Settings {\n        return {\n            // idk if there's other ones so...\n            episodeServers: [\"Shiva\"],\n            supportsDub: false,\n        };\n    }\n\n    private async fetchSearchResults(searchText: string, page: number) {\n        const response = await fetch(this.SEARCH_URL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Cookie: \"__ddg1_=;__ddg2_=;\"\n            },\n            body: JSON.stringify({\n                blacklist: [],\n                brands: [],\n                order_by: \"created_at_unix\",\n                page: page - 1,\n                tags: [],\n                search_text: searchText,\n                tags_mode: \"AND\",\n            }),\n        });\n        return response.json() as Promise<{\n            page: number;\n            nbPages: number;\n            nbHits: number;\n            hitsPerPage: number;\n            hits: string;\n        }>;\n    }\n\n    async search(opts: SearchOptions): Promise<SearchResult[]> {\n        let page = 1;\n        let query = replaceAndWithAmpersand(opts.query.trim());\n\n        let data = await this.fetchSearchResults(query, page);\n        let results = parseHits(data.hits);\n\n        while (data.nbHits === 0 && query.split(\" \").length > 3) {\n            query = replaceAndWithAmpersand(query.split(\" \").slice(0, -1).join(\" \"));\n            data = await this.fetchSearchResults(query, page);\n            results = parseHits(data.hits);\n        }\n\n        while (data.nbPages > page) {\n            page++;\n            data = await this.fetchSearchResults(query, page);\n            results.push(...parseHits(data.hits));\n        }\n\n        if (results.length > 0) {\n            console.log(`Best match for \"${opts.query}\":\\n> ${results.map(r => r.title).join(\"\\n> \")}`);\n        }\n\n        results.forEach(result => {\n            result.id = result.url;\n            result.url = `${this.API}/videos/hentai/${result.url}`.replace(/-\\d+$/, \"\");\n            result.title = result.title.replace(/\\s*\\d+$/, \"\");\n        });\n\n        return results;\n    }\n\n    async findEpisodes(id: string): Promise<EpisodeDetails[]> {\n        const episodes: EpisodeDetails[] = [];\n        const req = await fetch(`${this.API}/videos/hentai/${id}`);\n        const html = await req.text();\n        const json = JSON.parse(html.split('window.__NUXT__=')[1].split(';</script>')[0]) as HanimeResponse;\n        const videoData = json.state.data.video;\n        videoData.hentai_franchise_hentai_videos.forEach((video) => {\n            episodes.push({\n                id: video.id.toString(),\n                number: videoData.hentai_franchise_hentai_videos.indexOf(video) + 1,\n                url: `${this.EPISODE_URL}${video.slug}`,\n                title: videoData.hentai_franchise.name,\n            });\n        });\n        return episodes;\n    }\n\n    async findEpisodeServer(episode: EpisodeDetails, _server: string): Promise<EpisodeServer> {\n        if (!_server) return {} as EpisodeServer;\n\n        const req = await fetch(episode.url, {\n            headers: {\n                'x-signature': generateSignature(),\n                'x-time': Math.floor(Date.now() / 1000).toString(),\n                'x-signature-version': 'web2',\n                Cookie: \"__ddg1_=;__ddg2_=;\",\n                Referer: `${this.REFERER_API}`,\n                \"Access-Control-Allow-Origin\": \"*\"\n            }\n        });\n\n        const result = await req.json();\n        if (!result?.videos_manifest) {\n            console.log(`No videos manifest for ${episode.title}`);\n            return {} as EpisodeServer;\n        }\n        console.log(JSON.stringify(result.videos_manifest, null, 2));\n\n        const videos: VideoSource[] = [];\n        result.videos_manifest.servers.forEach((serverElement: any) => {\n            if (_server !== serverElement.name) return;\n\n            const allowedStreams = serverElement.streams.filter((s: any) => s.is_guest_allowed);\n            allowedStreams.forEach((stream: any) => {\n                videos.push({\n                    url: stream.url,\n                    type: \"m3u8\" as VideoSourceType,\n                    quality: `${stream.height}p`, // string, not number\n                    subtitles: [],\n                });\n            });\n        });\n\n        return <EpisodeServer>{\n            server: _server,\n            headers: {\n                Referer: `${this.REFERER_API}`,\n            },\n            videoSources: videos,\n        };\n    }\n}\n"
}