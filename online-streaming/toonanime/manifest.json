{
  "id": "toonanime-online-streaming",
  "name": "ToonAnime",
  "version": "1.0.0",
  "manifestURI": "https://raw.githubusercontent.com/TropicalFrog3/seanime-extension/refs/heads/main/online-streaming/toonanime/manifest.json",
  "language": "typescript",
  "type": "onlinestream-provider",
  "description": "ToonAnime est une extension Seanime en français pour regarder des anime doublés (VF) et sous-titrés (VOSTFR) depuis ToonAnime.biz, avec prise en charge multi‑serveurs et intégration de riches métadonnées.",
  "author": "TropicalFrog3",
  "icon": "https://raw.githubusercontent.com/TropicalFrog3/seanime-extension/refs/heads/main/online-streaming/toonanime/favicon.png",
  "website": "",
  "lang": "fr",
  "payload": "/// <reference path=\"../_external/.onlinestream-provider.d.ts\" />\n/// <reference path=\"../_external/core.d.ts\" />\n\ntype ToonAnimeEpisodesDetails = {\n    type: string;\n    data:\n    {\n        pageMetaTags: {\n            title: string;\n            description: string;\n            openGraph: {\n                title: string;\n                image: string;\n                description: string;\n                type: string;\n                site_name: string;\n            };\n            keywords: (string | string[])[];\n            robots: string;\n        };\n        post: {\n            status: boolean;\n            data: {\n                id: number;\n                title: string;\n                status: string;\n                duration: string;\n                score: string;\n                vote_plus: number;\n                vote_minus: number;\n                total_vote: number;\n                image_url: string;\n                cover_url: string; // use this if normalized\n                anilistid: number;\n                year: string;\n                related_saison: any[];\n                season: string;\n                romaji: string;\n                userPreferredTitle: string;\n                native: string;\n                synonyms: string[];\n                mal_id: number;\n                isAdult: boolean;\n                url: string;\n                totalEpisodes: string;\n                rating: string;\n                synopsis: string;\n                episodeslist: EpisodesList[];\n                currentEpisode: string;\n                rank: string;\n                popularity: string;\n                categorie: string;\n                categorie_url: string;\n                trailer_url: string;\n                source: string;\n                nextAiringEpisode: {\n                    airingAt: number;\n                    timeUntilAiring: number;\n                    episode: number;\n                };\n                hashtag: string | null;\n                broadcast: string | null;\n                created_at: string;\n                updated_at: string;\n                studios: { id: number; studio: string }[];\n                genres: string[];\n            };\n            characters: {\n                id: number;\n                name: string;\n                image: string;\n                role: string;\n            }[];\n            recommendations: {\n                id: number;\n                title: string;\n                totalEpisodes: string;\n                categories: string;\n                image: string;\n                url: string;\n            }[];\n        };\n    };\n    uses: {\n        params: string[];\n    };\n};\n\ntype EpisodesList = {\n    id: number;\n    image: string | null;\n    title: string;\n    number: number;\n    description: string;\n    data: {\n        [key: string]: {\n            server_id: string;\n            server_type: string;\n            server_number: string;\n            server_name: string;\n            server_url: string;\n            timestamps: any[];\n            quality: string;\n            server_source_type: string;\n        };\n    };\n};\n\ntype ToonAnimeSearchResult = {\n    status: boolean,\n    data: ToonData[],\n    hasNext: boolean\n    hasPrev: boolean\n    total: number,\n    page: number,\n    adminMessage: string[]\n};\n\ntype ToonData = {\n    id: number,\n    title: string,\n    romaji: string,\n    cat_url: string,\n    native: string,\n    synonyms: string[],\n    mal_id: number,\n    status: string,\n    isAdult: boolean,\n    url: string,\n    synopsis: string,\n    image: string,\n    categorie: string,\n    categorie_url: string,\n    createdate: string,\n    editedate: string,\n    popularity: string,\n    score: string,\n    quality: string | null,\n    total_episodes: string,\n    current_episode: string,\n    year: string,\n    duration: string,\n    updated_at: string,\n    created_at: string\n};\n\nenum ToonAnimeServer {\n    SIBNET = \"sibnet\",\n    VIDCDN = \"VidCDN\",\n    CDN1 = \"CDN 1\",\n    VIDM = \"vidm\"\n}\n\nconst DecodeHtml = s => s.replace(/&#34;/g, '\"').replace(/&#39;/g, \"'\").replace(/&amp;/g, \"&\").replace(/([{,]\\s*)([a-zA-Z0-9_]+)(\\s*:)/g, '$1\"$2\"$3');\n\nasync function FetchUrlSibnet(url?: string): Promise<EpisodeServer | null> {\n\n    // TODO: HANDLE MULTIPLE QUALITY\n    if (!url) return null;\n\n    const req = await fetch(url);\n    const html = await req.text();\n    const $ = LoadDoc(html);\n\n    const videos: VideoSource[] = [];\n    const headers = {\n        Host: \"video.sibnet.ru\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0\",\n        Accept: \"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5\",\n        \"Accept-Language\": \"fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3\",\n        Range: \"bytes=0-\",\n        \"Sec-GPC\": \"1\",\n        Connection: \"keep-alive\",\n        Referer: url,\n        Cookie: \"__ddg1_=;__ddg2_=;\",\n        \"Sec-Fetch-Dest\": \"video\",\n        \"Sec-Fetch-Mode\": \"no-cors\",\n        \"Sec-Fetch-Site\": \"same-origin\",\n        AcceptEncoding: \"identity\",\n        Priority: \"u=0\"\n    }\n\n    const ScriptItems = $(`script[type=\"text/javascript\"]`);\n    for (let i = 0; i < ScriptItems.length(); i++) {\n        const ScriptContent = ScriptItems.eq(i).html();\n        if (ScriptContent) {\n            const PlayerContent = DecodeHtml(ScriptContent).split(\"player.src([\")[1]?.split(\"]),\")[0];\n            if (PlayerContent) {\n                const videoUrl = PlayerContent.split(\",\")[0]?.split(\":\")[1]?.trim().replace(/['\"]/g, \"\");\n\n                if (videoUrl) {\n                    console.log(`https://video.sibnet.ru${videoUrl}`);\n                    videos.push({\n                        url: `https://video.sibnet.ru${videoUrl}`,\n                        type: \"mp4\",\n                        quality: \"HD\",\n                        subtitles: []\n                    });\n                    return {\n                        server: ToonAnimeServer.SIBNET,\n                        headers: headers,\n                        videoSources: videos\n                    };\n                }\n            }\n        }\n    }\n\n    return null;\n}\n\nasync function FetchUrlVidCDN(url?: string): Promise<EpisodeServer | null> {\n    return null;\n}\n\nasync function FetchUrlCDN1(url?: string): Promise<EpisodeServer | null> {\n    return null;\n}\n\nasync function FetchUrlVidM(url?: string): Promise<EpisodeServer | null> {\n    return null;\n}\n\nclass Provider {\n    private readonly SEARCH_URL = \"https://api2.toonanime.biz/filter?\";\n    private readonly SEARCH_PARAM = \"&status=all&genre=&order=default&year=all&limit=21\";\n    private readonly BASE_URL = \"https://www.toonanime.biz/\";\n\n    getSettings(): Settings {\n        return {\n            episodeServers: [ToonAnimeServer.SIBNET, ToonAnimeServer.VIDCDN, ToonAnimeServer.CDN1, ToonAnimeServer.VIDM],\n            supportsDub: true,\n        };\n    }\n\n    async search(opts: SearchOptions): Promise<SearchResult[]> {\n        const params = new URLSearchParams({\n            keyword: opts.query,\n            cat: opts.dub ? \"Anime VF\" : \"Anime VOSTFR\",\n            status: \"all\",\n            genre: \"\",\n            order: \"default\",\n            year: \"all\",\n            limit: \"21\"\n        });\n        const url = this.SEARCH_URL + params.toString();\n\n        const req = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0\",\n            }\n        });\n\n        if (!req.ok) {\n            throw new Error(`Request failed with status ${req.status}`);\n        }\n\n        const data = (await req.json()) as ToonAnimeSearchResult;\n        const results: SearchResult[] = [];\n\n        data.data.forEach(element => {\n            if (opts.dub) {\n                // FIND DUB VERSION\n                results.push({\n                    id: `${element.categorie_url}/${element.url}{${element.current_episode}}`,\n                    title: element.title,\n                    url: element.url,\n                    subOrDub: \"dub\"\n                });\n            }\n            else {\n                // FIND SUB VERSION\n                results.push({\n                    id: `${element.categorie_url}/${element.url}{${element.current_episode}}`,\n                    title: element.title,\n                    url: element.url,\n                    subOrDub: \"sub\"\n                });\n            }\n        });\n\n        return results;\n    }\n\n\n    async findEpisodes(id: string): Promise<EpisodeDetails[]> {\n        const number = id.split(\"{\")[1]?.split(\"}\")[0];\n        id = id.split(\"{\")[0];\n\n        const episodes: EpisodeDetails[] = [];\n\n        for(let i = 1; i <= (number ? parseInt(number) : 1); i++) {\n            episodes.push({\n                id: id,\n                number: i,\n                url: this.BASE_URL,\n            });\n        }\n\n        return episodes;\n    }\n\n    async findEpisodeServer(episode: EpisodeDetails, _server: string): Promise<EpisodeServer> {\n\n        async function GetServerUrl(server: string, baseurl: string, ep: number, id: string): Promise<string | undefined> {\n            const req = await fetch(baseurl);\n            const html = await req.text();\n            const $ = LoadDoc(html);\n            const ScriptItems = $(\"script\");\n\n            for (let i = 0; i < ScriptItems.length(); i++) {\n                const element = ScriptItems.eq(i);\n\n                if (!element.html()?.includes(\"const data = [\"))\n                    continue;\n\n                const htmlScript = element.html() || \"\";\n                const start = htmlScript.indexOf(\"const data = \");\n                if (start === -1) continue;\n\n                const afterStart = htmlScript.slice(start + \"const data = \".length);\n                const end = afterStart.indexOf(\"];\");\n                const rawData = end !== -1 ? afterStart.slice(0, end + 1) : afterStart;\n                const Details = JSON.parse(DecodeHtml(rawData)) as ToonAnimeEpisodesDetails[];\n\n                for (const detail of Details) {\n                    if (!detail.data?.post?.data?.episodeslist) continue;\n\n                    const episodeEntry = detail.data.post.data.episodeslist.find(e => e.number === ep);\n                    if (!episodeEntry) continue;\n\n                    for (const [_, serverData] of Object.entries(episodeEntry.data)) {\n                        if (serverData.server_name.toLowerCase() === server.toLowerCase()) {\n                            return serverData.server_url;\n                        }\n                    }\n                }\n            }\n            return undefined;\n        }\n        const ToonUrl = episode.url + episode.id;\n        const url = await GetServerUrl(_server, ToonUrl, episode.number, episode.id);\n        let video: EpisodeServer | null = null;\n\n        switch (_server) {\n            case ToonAnimeServer.SIBNET:\n                video = await FetchUrlSibnet(url);\n                break;\n            case ToonAnimeServer.VIDCDN:\n                video = await FetchUrlVidCDN(url);\n                break;\n            case ToonAnimeServer.CDN1:\n                video = await FetchUrlCDN1(url);\n                break;\n            case ToonAnimeServer.VIDM:\n                video = await FetchUrlVidM(url);\n                break;\n        }\n\n        if (video) {\n            return video;\n        } else {\n            return {\n                server: _server,\n                headers: {},\n                videoSources: []\n            };\n        }\n    }\n}"
}